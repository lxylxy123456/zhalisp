-> ; The following test cases come from Common LISPcraft by Robert Wilensky
=> ; 

-> CLEAR-ENV
=> ; Chapter 1

-> (+ 8 3)
=> 11

-> (* 8 3)
=> 24

-> (* 8 (+ 3 7))
=> 80
-> (* (+ 8 3) (+ 4 (* 9 2)))
=> 242

-> 8
=> 8

-> 3
=> 3

-> (1+ 8)
=> 9

-> (+ 7 8 9)
=> 24

-> (1+ 8 9)
=> ERROR

-> (setq X 5)
=> 5

-> x
=> 5

-> (+ x 8)
=> 13

-> x
=> 5

-> money
=> ERROR

-> (setq x (+ 4 5))
=> 9

-> x
=> 9

-> (+ 2 (setq x (* 3 4)))
=> 14

-> x
=> 12

-> (bodily 1 2)
=> ERROR

-> (setq 1+ 17)
=> 17

-> 1+
=> 17

-> (1+ 3)
=> 4

-> (exit)
=> ERROR	; LIMIT: differ from real Clisp

-> (setq x 4)
=> 4

-> CLEAR-ENV
=> CLEAR-ENV

-> x
=> ERROR

-> CLEAR-ENV
=> ; Chapter 2

-> (a b c)
=> ERROR

-> (quote (a b c))
=> (A B C)

-> '(a b c)
=> (A B C)

-> 'a
=> A

-> '6
=> 6

-> (setq x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (setq x '(+ 3 4))
=> (+ 3 4)

-> (setq x 'y)
=> Y

-> x
=> Y

-> (setq a 'a)
=> A

-> a
=> A

-> x
=> Y

-> (set x 'z)
=> Z

-> y
=> Z

-> x
=> Y

-> (set 'x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (car '(a b c))
=> A

-> (cdr '(a b c))
=> (B C)

-> (setq x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (car x)
=> A

-> x
=> (A B C)

-> (cdr x)
=> (B C)

-> x
=> (A B C)

-> (cdr '(a b))
=> (B)

-> (car (cdr '(a b)))
=> B

-> (car '((a b)))
=> (A B)

-> (car (car '((a b))))
=> A

-> (cdr '((a b) (c d)))
=> ((C D))

-> (cdr '((a b) (c d) (e f)))
=> ((C D) (E F))

-> (car (cdr '((a b) (c d))))
=> (C D)

-> (cdr (car '((a b) (c d))))
=> (B)

-> (cdr (car '((a b c) (d e f))))
=> (B C)

-> (car (car '((a b c) (d e f))))
=> A

-> (car (cdr '((a b c) (d e f))))
=> (D E F)

-> (car (car (cdr '((a b c) (d e f)))))
=> D

-> (cdr (car (cdr '((a b c) (d e f)))))
=> (E F)

-> (car (cdr (car (cdr '((a b c) (d e f))))))
=> E

-> (car (cdr '((a b c) (d e f))))
=> (D E F)

-> (cadr '((a b c) (d e f)))
=> (D E F)

-> (car (cdr (car (cdr '((a b c) (d e f))))))
=> E

-> (cadadr '((a b c) (d e f)))
=> E

-> (car '(cdr '(a b c)))
=> CDR

-> (car (cdr '(a b c)))
=> B

-> (cdr '(c))
=> NIL

-> '()
=> NIL

-> ()
=> NIL

-> nil
=> NIL

-> (cons 'a '(b c))
=> (A B C)

-> (setq x (cons 'a '(b c)))
=> (A B C)

-> (car x)
=> A

-> (cdr x)
=> (B C)

-> (cons 'a '(b))
=> (A B)

-> (cons '(a b) '(c d))
=> ((A B) C D)

-> (cons 'a (cons 'b '(c d)))
=> (A B C D)

-> (setq x '(a b))
=> (A B)

-> (cons (car x) (cons (cadr x) '(c d)))
=> (A B C D)

-> (cons 'a nil)
=> (A)

-> (setq x 'a)
=> A

-> (setq y '(b c))
=> (B C)

-> (cons x y)
=> (A B C)

-> x
=> A

-> y
=> (B C)

-> (cons 'a (cons 'b (cons 'c nil)))
=> (A B C)

-> (cons 'a (cons (cons 'b (cons 'c nil)) (cons 'd nil)))
=> (A (B C) D)

-> (list 'a 'b 'c)
=> (A B C)

-> (list 'a '(b c) 'd)
=> (A (B C) D)

-> (append '(a b) '(c d) '(e f))
=> (A B C D E F)

-> CLEAR-ENV
=> ; Chapter 3

-> (defun addthree (x) (+ x 3))
=> ADDTHREE

-> (addthree 7)
=> 10

-> (setq x (addthree 19))
=> 22

-> (addthree 11)
=> 14

-> (addthree (* 4 (1- 7)))
=> 27

-> (defun average (x y) (/ (+ x y) 2))
=> AVERAGE

-> (average 7 21)
=> 14

-> (average 9 31)
=> 20

-> (defun xcons (l e) (cons e l))
=> XCONS

-> (xcons '(b c) 'a)
=> (A B C)

-> (defun list-of-lists (x) (list (list (car x)) (list (cadr x))))
=> LIST-OF-LISTS

-> (list-of-lists '(a b))
=> ((A) (B))

-> (list-of-lists '(1 2))
=> ((1) (2))

-> (list-of-lists (xcons (cons 'c nil) 'd))
=> ((D) (C))

-> (setq x '(a b c))
=> (A B C)

-> (addthree 7)
=> 10

-> x
=> (A B C)

-> (defun squared (y) (* y y))
=> SQUARED

-> (defun hyp (x y) (sqrt (+ (squared x) (squared y))))
=> HYP

-> (hyp 3 4)
=> 5

-> (defun sum-average (x y) (setq sum (+ x y)) (/ sum 2))
=> SUM-AVERAGE

-> (sum-average 29 13)
=> 21

-> sum
=> 42

-> (sum-average 7 93)
=> 50

-> sum
=> 100

-> (defun sum-average-caller (sum x y) (sum-average x y) sum)
=> SUM-AVERAGE-CALLER

-> (setq sum '(a b c))
=> (A B C)

-> (sum-average-caller 0 55 65)
=> 0

-> sum
=> 120

-> (load 'utilities)
=> ERROR	; LIMIT: cannot load other files

-> CLEAR-ENV
=> ; Chapter 4

-> (atom 'a)
=> T

-> (atom 8)
=> T

-> (atom '(a b c))
=> NIL

-> (atom (car '(a b c)))
=> T

-> (atom (cdr '(a b c)))
=> NIL

-> (listp 'a)
=> NIL

-> (listp 8)
=> NIL

-> (listp '(a b c))
=> T

-> (listp (car '(a b c)))
=> NIL

-> (listp (cdr '(a b c)))
=> T

-> (atom nil)
=> T

-> (listp nil)
=> T

-> (null nil)
=> T

-> (null nil)
=> T

-> (null 'a)
=> NIL

-> (null '(a b c))
=> NIL

-> (null ())
=> T

-> (equal 'a 'b)
=> NIL

-> (equal 'a 'a)
=> T

-> (equal '(a b c) '(a b c))
=> T

-> (equal '(a b c) '(a (b) c))
=> NIL

-> (numberp 6)
=> T

-> (numberp 'a)
=> NIL

-> (typep 6 'number)
=> T

-> (typep 'a 'number)
=> NIL

-> (member 'b '(a b c))
=> (B C)

-> (member 'x '(a b c))
=> NIL

-> (member 'y '(x (y) z))
=> NIL

-> (member '(a b) '(a b c))
=> NIL

-> (defun car-atomp (x) (atom (car x)))
=> CAR-ATOMP

-> (car-atomp '(a b c))
=> T

-> (car-atomp '((a) (b) (c)))
=> NIL

-> (setq x '(a b c))
=> (A B C)

-> (cond ((listp x) (car x)))
=> A

-> (setq x 'y)
=> Y

-> (cond ((listp x) (car x)))
=> NIL

-> (defun car-atomp (x) (cond ((listp x) (atom (car x)))))
=> CAR-ATOMP

-> (car-atomp '(a b c))
=> T

-> (car-atomp 'z)
=> NIL

-> (defun cond-example1 (x)
	(cond ((listp x) (cons 'a x)) ((numberp x) (+ 7 x))))
=> COND-EXAMPLE1

-> (cond-example1 '(b c))
=> (A B C)

-> (cond-example1 9)
=> 16

-> (cond-example1 'z)
=> NIL

-> (defun cond-example2 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))))
=> COND-EXAMPLE2

-> (cond-example2 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example2 9)
=> 16

-> flag
=> NUMBER

-> (defun cond-example3 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))
		(t (setq flag 'neither) nil)))
=> COND-EXAMPLE3

-> (cond-example3 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example3 'z)
=> NIL

-> flag
=> NEITHER

-> (defun cond-example4 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))
		((setq flag 'neither))))
=> COND-EXAMPLE4

-> (cond-example4 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example4 'z)
=> NEITHER

-> flag
=> NEITHER

-> (defun our-adjoin (e l) (cond ((member e l) l) (t (cons e l))))
=> OUR-ADJOIN

-> (our-adjoin 'b '(a b c))
=> (A B C)

-> (our-adjoin 'b '(x y z))
=> (B X Y Z)

-> (defun our-adjoin (e l) (if (member e l) l (cons e l)))
=> OUR-ADJOIN

-> (our-adjoin 'b '(a b c))
=> (A B C)

-> (our-adjoin 'b '(x y z))
=> (B X Y Z)

-> (defun even-50-100 (x)
	(cond ((numberp x) (cond ((evenp x) (cond ((> x 49) (< x 101))))))))
=> EVEN-50-100

-> (even-50-100 17)
=> NIL

-> (even-50-100 88)
=> T

-> (even-50-100 89)
=> NIL

-> (even-50-100 102)
=> NIL

-> (even-50-100 '(a b c))
=> NIL

-> (setq x 86)
=> 86

-> (not (atom x))
=> NIL

-> (and (evenp x) (< x 100))
=> T

-> (or (null x) (numberp x))
=> T

-> (setq l '(a b c))
=> (A B C)

-> (and (listp l) (numberp (car l)))
=> NIL

-> (cond ((listp l) (numberp (car l))))
=> NIL

-> (defun even-50-100 (x)
	(and (numberp x) (evenp x) (> x 49) (< x 101)))
=> EVEN-50-100

-> (even-50-100 17)
=> NIL

-> (even-50-100 88)
=> T

-> (even-50-100 89)
=> NIL

-> (even-50-100 102)
=> NIL

-> (even-50-100 '(a b c))
=> NIL

-> CLEAR-ENV
=> ; Chapter 5

-> (defun do-length (l) (do ((ll l (cdr ll)) (sum 0 (1+ sum))) ((atom ll) sum)))
=> DO-LENGTH

-> (do-length '(a b c))
=> 3

-> (do-length 3)
=> 0

-> (do-length '(a (b c)))
=> 2

-> (defun do-length (l)
	(do ((ll l) (sum 0))
		((atom ll) sum)
		(setq ll (cdr ll))
		(setq sum (1+ sum))))
=> DO-LENGTH

-> (do-length '(a b c))
=> 3

-> (do-length 3)
=> 0

-> (do-length '(a (b c)))
=> 2

-> (defun do-rev (l)
	(do ((x l (cdr x)) (res nil (cons (car x) res))) ((null x) res)))
=> DO-REV

-> (do-rev '(a b c))
=> (C B A)

-> (defun prog-length (l)
	(prog ((sum 0))
		again
		(cond ((atom l) (return sum)))
		(setq sum (1+ sum))
		(setq l (cdr l))
		(go again)))
=> PROG-LENGTH

-> (prog-length '(a b c))
=> 3

-> (prog-length 3)
=> 0

-> (prog-length '(a (b c)))
=> 2

-> (defun prog-member (e l)
	(prog ()
		label1
		(cond ((atom l) (return nil))
			((equal e (car l)) (return l))
			(t (setq l (cdr l)) (go label1)))))
=> PROG-MEMBER

-> (prog-member 'b '(a b c))
=> (B C)

-> (prog-member 'x '(a b c))
=> NIL

-> (prog-member 'y '(x (y) z))
=> NIL

-> (prog-member '(a b) '(a b c))
=> NIL

-> (defun another-prog-member (e l)
	(prog ()
		label1
		(cond ((atom l) (return nil))
			((equal e (car l)) (return l)))
		(setq l (cdr l))
		(go label1)))
=> ANOTHER-PROG-MEMBER

-> (another-prog-member 'b '(a b c))
=> (B C)

-> (another-prog-member 'x '(a b c))
=> NIL

-> (another-prog-member 'y '(x (y) z))
=> NIL

-> (another-prog-member '(a b) '(a b c))
=> NIL

-> CLEAR-ENV
=> ; Chapter 6

-> (defun recursive-length (l) (if (null l) 0 (1+ (recursive-length (cdr l)))))
=> RECURSIVE-LENGTH

-> (recursive-length '(1 2 3 4))
=> 4

-> (recursive-length nil)
=> 0

-> (defun recursive-member (e l)
	(and l (or (equal e (car l)) (recursive-member e (cdr l)))))
=> RECURSIVE-MEMBER

-> (recursive-member 'b '(a b c))
=> T

-> (recursive-member 'x '(a b c))
=> NIL

-> (recursive-member 'y '(x (y) z))
=> NIL

-> (recursive-member '(a b) '(a b c))
=> NIL

-> (defun recursive-member (e l)
	(cond ((null l) nil) 
		(t (or (equal e (car l)) (recursive-member e (cdr l))))))
=> RECURSIVE-MEMBER

-> (recursive-member 'b '(a b c))
=> T

-> (recursive-member 'x '(a b c))
=> NIL

-> (recursive-member 'y '(x (y) z))
=> NIL

-> (recursive-member '(a b) '(a b c))
=> NIL

-> (defun recursive-member (e l)
	(cond ((null l) nil)
		((equal e (car l)) l)
		(t (recursive-member e (cdr l)))))
=> RECURSIVE-MEMBER

-> (recursive-member 'b '(a b c))
=> (B C)

-> (recursive-member 'x '(a b c))
=> NIL

-> (recursive-member 'y '(x (y) z))
=> NIL

-> (recursive-member '(a b) '(a b c))
=> NIL

-> (defun factorial (n) (cond ((zerop n) 1) (t (* n (factorial (1- n))))))
=> FACTORIAL

-> (factorial 3)
=> 6

-> (factorial 6)
=> 720

-> (factorial -1)
=> ERRORC

-> (factorial 0.1)
=> ERROR

-> (defun our-subst (in out struct)
	(if (atom struct) struct (cons (if (equal out (car struct)) in
	(our-subst in out (car struct))) (our-subst in out (cdr struct)))))
=> OUR-SUBST

-> (our-subst 3 2 '(1 2 3 4 5 (1 2 3)))
=> (1 3 3 4 5 (1 3 3))

-> (defun our-subst (in out struct)
	(cond ((atom struct) struct)
		((equal out (car struct))
			(cons in (our-subst in out (cdr struct))))
		(t (cons (our-subst in out (car struct))
			(our-subst in out (cdr struct))))))
=> OUR-SUBST

-> (our-subst 3 2 '(1 2 3 4 5 (1 2 3)))
=> (1 3 3 4 5 (1 3 3))

-> (defun our-subst (in out struct)
	(cond ((equal out struct) in)
		((atom struct) struct)
		(t (cons (our-subst in out (car struct))
			(our-subst in out (cdr struct))))))
=> OUR-SUBST

-> (our-subst 3 2 '(1 2 3 4 5 (1 2 3)))
=> (1 3 3 4 5 (1 3 3))

-> (defun fib (n)
	(cond ((or (equal n 1) (equal n 2)) 1) (t (+ (fib (1- n)) (fib (- n 2))))))
=> FIB

-> (fib 7)
=> 13

-> (defun iterative-reverse (l)
	(do ((ll l (cdr ll))
		(result nil (cons (car ll) result)))
		((null ll) result)))
=> ITERATIVE-REVERSE

-> (iterative-reverse '(a b c d))
=> (D C B A)

-> (defun reverse-2 (original revdlist)
	(cond ((null original) revdlist)
		(t (reverse-2 (cdr original) (cons (car original) revdlist)))))
=> REVERSE-2

-> (defun recursive-reverse (l) (reverse-2 l nil))
=> RECURSIVE-REVERSE

-> (recursive-reverse '(a b c d e))
=> (E D C B A)

-> CLEAR-ENV
=> ; Chapter 7
	; Property lists are not implemented; skip

-> CLEAR-ENV
=> ; Chapter 8

-> (defun sum-of-ints (n)
	(do ((i n (1- i)) (result 0 (+ i result))) ((zerop i) result)))
=> SUM-OF-INTS

-> (sum-of-ints 5)
=> 15

-> (sum-of-ints 10)
=> 55

-> (defun sum-loop (func n)
	(do ((i n (1- i)) (result 0 (+ (func i) result))) ((zerop i) result)))
=> SUM-LOOP

-> (sum-loop 'sqrt 5)
=> ERROR

-> (apply 'cons '(a (b c)))
=> (A B C)

-> (apply 'car '((a b c)))
=> A

-> (apply '+ '(1 3 5 7))
=> 16

-> (defun sum-loop (func n)
	(do ((i n (1- i))
		(result 0 (+ (apply func (list i)) result)))
		((zerop i) result)))
=> SUM-LOOP

-> (sum-loop 'sqrt 5)
=> 8.38233234744176

-> (sum-loop 'sqrt 10)
=> 22.468278186204103

-> (defun squared (x) (* x x))
=> SQUARED

-> (sum-loop 'squared 5)
=> 55

-> (sum-loop 'squared 15)
=> 1240

-> (defun cubed (x) (* x x x))
=> CUBED

-> (sum-loop 'cubed 5)
=> 225

-> (sum-loop 'cubed 15)
=> 14400

-> (defun sum-loop (func n)
	(do ((i n (1- i))
		(result 0 (+ (funcall func i) result)))
		((zerop i) result)))
=> SUM-LOOP

-> (sum-loop 'sqrt 5)
=> 8.38233234744176

-> (sum-loop 'sqrt 10)
=> 22.468278186204103

-> (sum-loop 'squared 5)
=> 55

-> (sum-loop 'squared 15)
=> 1240

-> (sum-loop 'cubed 5)
=> 225

-> (sum-loop 'cubed 15)
=> 14400

-> (setq x 'cons)
=> CONS

-> (x 'a '(b c))
=> ERROR	; in some lisp may be (A B C)

-> (setq x '(cons 'a '(b c)))
=> (CONS (QUOTE A) (QUOTE (B C)))

-> (eval x)
=> (A B C)

-> (setq a 'b)
=> B

-> (setq b 'c)
=> C

-> a
=> B

-> b
=> C

-> (eval a)
=> C

-> (eval (cons '+ '(2 3)))
=> 5

-> (defun our-if (test true false) (cond (test (eval true)) (t (eval false))))
=> OUR-IF

-> (setq *n* 5)
=> 5

-> (our-if (> *n* 3) '(- *n* 3) '(+ *n* 3))
=> 2

-> (setq *n* 1)
=> 1

-> (our-if (> *n* 3) '(- *n* 3) '(+ *n* 3))
=> 4

-> (defun our-if (test true false) (eval (cond (test true) (t false))))
=> OUR-IF

-> (setq *n* 5)
=> 5

-> (our-if (> *n* 3) '(- *n* 3) '(+ *n* 3))
=> 2

-> (setq *n* 1)
=> 1

-> (our-if (> *n* 3) '(- *n* 3) '(+ *n* 3))
=> 4

-> (defun our-if (test true false)
	(setq *n* 1) (eval (cond (test true) (t false))))
=> OUR-IF

-> (setq *n* 5)
=> 5

-> (our-if (> *n* 3) '(- *n* 3) '(+ *n* 3))
=> -2

-> (mapcar '1+ '(100 200 300))
=> (101 201 301)

-> (mapcar '+ '(1 2 3 4) '(100 200 300 400))
=> (101 202 303 404)

-> (mapcar 'atom '(a b c (x y) nil (a b) x y))
=> (T T T NIL T NIL T T)

-> (maplist 'cons '(a b) '(x y))
=> (((A B) X Y) ((B) Y))

-> (maplist 'list '(a b) '(x y))
=> (((A B) (X Y)) ((B) (Y)))

-> (apply 'append '((a b c) nil (d e) nil (f g h)))
=> (A B C D E F G H)

-> CLEAR-ENV
=> ; Chapter 9

-> (defun sum-loop (func n)
	(do ((i n (1- i))
		(result 0 (+ (funcall func i) result)))
		((zerop i) result)))
=> SUM-LOOP

-> (sum-loop (lambda (x) (* x x x)) 15)
=> 14400

-> (symbol-function 'cubed)
=> ERROR	; cannot implement symbol-function

-> ((lambda (x y) (cons y x)) '(b) 'a)
=> (A B)

-> (defun xcons (x y) (cons y x))
=> XCONS

-> (xcons '(b) 'a)
=> (A B)

-> ((lambda () 'hello))
=> HELLO

-> (defun say-hello () 'hello)
=> SAY-HELLO

-> (say-hello)
=> HELLO

-> (sum-loop (function sqrt) 10)
=> 22.468278186204103

-> (sum-loop (function (lambda (x) (* x x x))) 15)
=> 14400

-> (sum-loop #'sqrt 10)
=> 22.468278186204103

-> (sum-loop #'(lambda (x) (* x x x)) 15)
=> 14400

-> (defun func1 (x y z) (- (+ x y) z))
	(defun func2 (temp) (print (1+ temp)))
	(defun func3 (temp) (print (1- temp)))
	(setq X 10)
	(setq Y 12)
	(setq Z 20)
=> FUNC1
	FUNC2
	FUNC3
	10
	12
	20

-> (prog (temp) (setq temp (func1 x y z)) (func2 temp) (func3 temp))
=> 3
	1
	NIL

-> ((lambda (temp) (func2 temp) (func3 temp)) (func1 x y z))
=> 3
	1
	1

-> (let ((temp (func1 x y z))) (func2 temp) (func3 temp))
=> 3
	1
	1

