-> ; The following test cases come from Common LISPcraft by Robert Wilensky
=> ; 

-> CLEAR-ENV
=> ; Chapter 1

-> (+ 8 3)
=> 11

-> (* 8 3)
=> 24

-> (* 8 (+ 3 7))
=> 80
-> (* (+ 8 3) (+ 4 (* 9 2)))
=> 242

-> 8
=> 8

-> 3
=> 3

-> (1+ 8)
=> 9

-> (+ 7 8 9)
=> 24

-> (1+ 8 9)
=> ERROR

-> (setq X 5)
=> 5

-> x
=> 5

-> (+ x 8)
=> 13

-> x
=> 5

-> money
=> ERROR

-> (setq x (+ 4 5))
=> 9

-> x
=> 9

-> (+ 2 (setq x (* 3 4)))
=> 14

-> x
=> 12

-> (bodily 1 2)
=> ERROR

-> (setq 1+ 17)
=> 17

-> 1+
=> 17

-> (1+ 3)
=> 4

-> (exit)
=> ERROR	; LIMIT: differ from real Clisp

-> (setq x 4)
=> 4

-> CLEAR-ENV
=> CLEAR-ENV

-> x
=> ERROR

-> CLEAR-ENV
=> ; Chapter 2

-> (a b c)
=> ERROR

-> (quote (a b c))
=> (A B C)

-> '(a b c)
=> (A B C)

-> 'a
=> A

-> '6
=> 6

-> (setq x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (setq x '(+ 3 4))
=> (+ 3 4)

-> (setq x 'y)
=> Y

-> x
=> Y

-> (setq a 'a)
=> A

-> a
=> A

-> x
=> Y

-> (set x 'z)
=> Z

-> y
=> Z

-> x
=> Y

-> (set 'x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (car '(a b c))
=> A

-> (cdr '(a b c))
=> (B C)

-> (setq x '(a b c))
=> (A B C)

-> x
=> (A B C)

-> (car x)
=> A

-> x
=> (A B C)

-> (cdr x)
=> (B C)

-> x
=> (A B C)

-> (cdr '(a b))
=> (B)

-> (car (cdr '(a b)))
=> B

-> (car '((a b)))
=> (A B)

-> (car (car '((a b))))
=> A

-> (cdr '((a b) (c d)))
=> ((C D))

-> (cdr '((a b) (c d) (e f)))
=> ((C D) (E F))

-> (car (cdr '((a b) (c d))))
=> (C D)

-> (cdr (car '((a b) (c d))))
=> (B)

-> (cdr (car '((a b c) (d e f))))
=> (B C)

-> (car (car '((a b c) (d e f))))
=> A

-> (car (cdr '((a b c) (d e f))))
=> (D E F)

-> (car (car (cdr '((a b c) (d e f)))))
=> D

-> (cdr (car (cdr '((a b c) (d e f)))))
=> (E F)

-> (car (cdr (car (cdr '((a b c) (d e f))))))
=> E

-> (car (cdr '((a b c) (d e f))))
=> (D E F)

-> (cadr '((a b c) (d e f)))
=> (D E F)

-> (car (cdr (car (cdr '((a b c) (d e f))))))
=> E

-> (cadadr '((a b c) (d e f)))
=> E

-> (car '(cdr '(a b c)))
=> CDR

-> (car (cdr '(a b c)))
=> B

-> (cdr '(c))
=> NIL

-> '()
=> NIL

-> ()
=> NIL

-> nil
=> NIL

-> (cons 'a '(b c))
=> (A B C)

-> (setq x (cons 'a '(b c)))
=> (A B C)

-> (car x)
=> A

-> (cdr x)
=> (B C)

-> (cons 'a '(b))
=> (A B)

-> (cons '(a b) '(c d))
=> ((A B) C D)

-> (cons 'a (cons 'b '(c d)))
=> (A B C D)

-> (setq x '(a b))
=> (A B)

-> (cons (car x) (cons (cadr x) '(c d)))
=> (A B C D)

-> (cons 'a nil)
=> (A)

-> (setq x 'a)
=> A

-> (setq y '(b c))
=> (B C)

-> (cons x y)
=> (A B C)

-> x
=> A

-> y
=> (B C)

-> (cons 'a (cons 'b (cons 'c nil)))
=> (A B C)

-> (cons 'a (cons (cons 'b (cons 'c nil)) (cons 'd nil)))
=> (A (B C) D)

-> (list 'a 'b 'c)
=> (A B C)

-> (list 'a '(b c) 'd)
=> (A (B C) D)

-> (append '(a b) '(c d) '(e f))
=> (A B C D E F)

-> CLEAR-ENV
=> ; Chapter 3

-> (defun addthree (x) (+ x 3))
=> ADDTHREE

-> (addthree 7)
=> 10

-> (setq x (addthree 19))
=> 22

-> (addthree 11)
=> 14

-> (addthree (* 4 (1- 7)))
=> 27

-> (defun average (x y) (/ (+ x y) 2))
=> AVERAGE

-> (average 7 21)
=> 14

-> (average 9 31)
=> 20

-> (defun xcons (l e) (cons e l))
=> XCONS

-> (xcons '(b c) 'a)
=> (A B C)

-> (defun list-of-lists (x) (list (list (car x)) (list (cadr x))))
=> LIST-OF-LISTS

-> (list-of-lists '(a b))
=> ((A) (B))

-> (list-of-lists '(1 2))
=> ((1) (2))

-> (list-of-lists (xcons (cons 'c nil) 'd))
=> ((D) (C))

-> (setq x '(a b c))
=> (A B C)

-> (addthree 7)
=> 10

-> x
=> (A B C)

-> (defun squared (y) (* y y))
=> SQUARED

-> (defun hyp (x y) (sqrt (+ (squared x) (squared y))))
=> HYP

-> (hyp 3 4)
=> 5.0

-> (defun sum-average (x y) (setq sum (+ x y)) (/ sum 2))
=> SUM-AVERAGE

-> (sum-average 29 13)
=> 21

-> sum
=> 42

-> (sum-average 7 93)
=> 50

-> sum
=> 100

-> (defun sum-average-caller (sum x y) (sum-average x y) sum)
=> SUM-AVERAGE-CALLER

-> (setq sum '(a b c))
=> (A B C)

-> (sum-average-caller 0 55 65)
=> 0

-> sum
=> 120

-> (load 'utilities)
=> ERROR	; LIMIT: cannot load other files

-> CLEAR-ENV
=> ; Chapter 4

-> (atom 'a)
=> T

-> (atom 8)
=> T

-> (atom '(a b c))
=> NIL

-> (atom (car '(a b c)))
=> T

-> (atom (cdr '(a b c)))
=> NIL

-> (listp 'a)
=> NIL

-> (listp 8)
=> NIL

-> (listp '(a b c))
=> T

-> (listp (car '(a b c)))
=> NIL

-> (listp (cdr '(a b c)))
=> T

-> (atom nil)
=> T

-> (listp nil)
=> T

-> (null nil)
=> T

-> (null nil)
=> T

-> (null 'a)
=> NIL

-> (null '(a b c))
=> NIL

-> (null ())
=> T

-> (equal 'a 'b)
=> NIL

-> (equal 'a 'a)
=> T

-> (equal '(a b c) '(a b c))
=> T

-> (equal '(a b c) '(a (b) c))
=> NIL

-> (numberp 6)
=> T

-> (numberp 'a)
=> NIL

-> (typep 6 'number)
=> T

-> (typep 'a 'number)
=> NIL

-> (member 'b '(a b c))
=> (B C)

-> (member 'x '(a b c))
=> NIL

-> (member 'y '(x (y) z))
=> NIL

-> (member '(a b) '(a b c))
=> NIL

-> (defun car-atomp (x) (atom (car x)))
=> CAR-ATOMP

-> (car-atomp '(a b c))
=> T

-> (car-atomp '((a) (b) (c)))
=> NIL

-> (setq x '(a b c))
=> (A B C)

-> (cond ((listp x) (car x)))
=> A

-> (setq x 'y)
=> Y

-> (cond ((listp x) (car x)))
=> NIL

-> (defun car-atomp (x) (cond ((listp x) (atom (car x)))))
=> CAR-ATOMP

-> (car-atomp '(a b c))
=> T

-> (car-atomp 'z)
=> NIL

-> (defun cond-example1 (x)
	(cond ((listp x) (cons 'a x)) ((numberp x) (+ 7 x))))
=> COND-EXAMPLE1

-> (cond-example1 '(b c))
=> (A B C)

-> (cond-example1 9)
=> 16

-> (cond-example1 'z)
=> NIL

-> (defun cond-example2 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))))
=> COND-EXAMPLE2

-> (cond-example2 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example2 9)
=> 16

-> flag
=> NUMBER

-> (defun cond-example3 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))
		(t (setq flag 'neither) nil)))
=> COND-EXAMPLE3

-> (cond-example3 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example3 'z)
=> NIL

-> flag
=> NEITHER

-> (defun cond-example4 (x)
	(cond ((listp x) (setq flag 'list) (cons 'a x))
		((numberp x) (setq flag 'number) (+ 7 x))
		((setq flag 'neither))))
=> COND-EXAMPLE4

-> (cond-example4 '(b c))
=> (A B C)

-> flag
=> LIST

-> (cond-example4 'z)
=> NEITHER

-> flag
=> NEITHER

-> (defun our-adjoin (e l) (cond ((member e l) l) (t (cons e l))))
=> OUR-ADJOIN

-> (our-adjoin 'b '(a b c))
=> (A B C)

-> (our-adjoin 'b '(x y z))
=> (B X Y Z)

-> (defun our-adjoin (e l) (if (member e l) l (cons e l)))
=> OUR-ADJOIN

-> (our-adjoin 'b '(a b c))
=> (A B C)

-> (our-adjoin 'b '(x y z))
=> (B X Y Z)

-> (defun even-50-100 (x)
	(cond ((numberp x) (cond ((evenp x) (cond ((> x 49) (< x 101))))))))
=> EVEN-50-100

-> (even-50-100 17)
=> NIL

-> (even-50-100 88)
=> T

-> (even-50-100 89)
=> NIL

-> (even-50-100 102)
=> NIL

-> (even-50-100 '(a b c))
=> NIL

-> (setq x 86)
=> 86

-> (not (atom x))
=> NIL

-> (and (evenp x) (< x 100))
=> T

-> (or (null x) (numberp x))
=> T

-> (setq l '(a b c))
=> (A B C)

-> (and (listp l) (numberp (car l)))
=> NIL

-> (cond ((listp l) (numberp (car l))))
=> NIL

-> (defun even-50-100 (x)
	(and (numberp x) (evenp x) (> x 49) (< x 101)))
=> EVEN-50-100

-> (even-50-100 17)
=> NIL

-> (even-50-100 88)
=> T

-> (even-50-100 89)
=> NIL

-> (even-50-100 102)
=> NIL

-> (even-50-100 '(a b c))
=> NIL

-> CLEAR-ENV
=> ; Chapter 5

