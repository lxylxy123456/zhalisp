-> ;
=> ;

-> (quote (123.67 (1 2 . (3 4)) (1 2 3 . 4)))
=> (123.67 (1 2 . (3 4)) (1 2 3 . 4))

-> (+ 1 2 3 (/ 3 4) (* 1 3) (- 90 3))
	123
=> 387/4
	123

-> (defun f (x) (* 9 x) (+ 2 x))
	(f 2)
	(f 4)
=> F
	4
	6

-> (funcall #'+ 1 2 3)
=> 6

-> (apply #'+ 1 2 3 '(4 5 6))
=> 21

-> (apply 'cons '(a (b c)))
=> (A B C)

-> (= 1 2)
=> NIL

-> (= 2 2)
=> T

-> (> 1 2)
=> NIL

-> (>= 1 2)
=> NIL

-> (list (< 1 2) (<= 1 2))
=> (T T)

-> (cond ((> 1 2) 1) ((< 1 2) 2))
=> 2

-> (let ((x 10)) (* x 2))
=> 20

-> (setq x 10)
	x
=> 10
	10

-> (eq 1 2)
=> NIL

-> (eql 1 2)
=> NIL

-> (equal 1 2)
=> NIL

-> (eq 1 1)
=> T

-> (eql 1 1)
=> T

-> (equal 1 1)
=> T

-> (eq '(1) '(1))
=> NIL

-> (eql '(1) '(1))
=> NIL

-> (equal '(1) '(1))
=> T

-> (cadddr '(1 2 3 4 5))
=> 4

-> (or nil nil 1 (/ 0 0))
=> 1

-> (and 1 1 nil (/ 0 0))
=> NIL

-> (or 1 1 1)
=> 1

-> (and 1 1 1)
=> 1

-> (or nil nil nil)
=> NIL

-> (and nil nil nil)
=> NIL

-> (not nil)
=> T

-> (not 1)
=> NIL

-> t
=> t

-> (defun r (x) (return x))
=> R

-> (prog () (r 1))
=> ERROR

-> (prog () (return 1))
=> 1

-> (defun g (x) (go x))
=> G

-> (prog () (g x) (/ 0 0) x)
=> ERROR

-> (prog () (go x) (/ 0 0) x)
=> NIL

-> (+ (print 1) 2)
=> 1 3

-> (+ 2 3 . 4)
=> 5

-> (append '(2 3) '(3 4))
=> (2 3 3 4)

-> (append '(2 3) '(3 4) . 5)
=> (2 3 3 4)

-> (append '(2 3) '(3 4) 5)
=> (2 3 3 4 . 5)

-> (append '(2 3) '(3 4) '(5))
=> (2 3 3 4 5)

-> (append '(2 3) '(3 . 4) '(5))
=> ERROR

-> (append '(2 3) '(3 4) 5)
=> (2 3 3 4 . 5)

-> (append 1)
=> 1

-> (append '(2 3) '(3 4) 5)
=> (2 3 3 4 . 5)

-> (append '(2 3) '(3 4) 5 ())
=> ERROR

-> (append '(2 3) '(3 4) '(5) ())
=> (2 3 3 4 5)

-> (append '(2 3) '(3 4) '(5 . 6) ())
=> ERROR

-> (atomp #c(1 2))
=> ERROR

-> (atom #c(1 2))
=> T
