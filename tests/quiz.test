-> ; Credit of the following test cases above goes to Professor Aditya V. Thakur
=> ;

-> (append '(1 2 3) '(4 5 6) '(7 8 9))
=> (1 2 3 4 5 6 7 8 9)

-> (mapcar #'+ '(1 2 3) '(10 20 30))
=> (11 22 33)

-> (mapcar #'+ nil)
=> ()

-> (mapc #'+ '(1 2 3) '(10 20 30))
=> (1 2 3)

-> (car (cdr '(a b c)))
=> b

-> (atom (cdr (cdr '(a))))
=> T

-> (mapcar #'- '(1 2 3))
=> (-1 -2 -3)

-> (mapcar 'list '(10 2 5))
=> ((10) (2) (5))

-> (defun bar (x) (list x (1+ x)))
	(defun mappend (fn lst) (apply #'append (mapcar fn lst)))
	(mappend #'bar '(10 1 3))
=> bar
	mappend
	(10 11 1 2 3 4)

-> (cons '(1 2) '3)
=> ((1 2) . 3)

-> (maplist #'cons '(a b) '(x y))
=> (((A B) X Y) ((B) Y))

-> (let ((a 2)) (let ((a 3) (b (+ a 1))) (+ a b)))
=> 6

-> (cond ((> 1 3) 1) (( > 1 2) 2))
=> NIL

-> (listp (zerop 1))
=> T

